
; ******** Source: 64keymaps.asm
     1                          ; 64keymaps.asm
     2                          ;
     3                          ; Copyright (c) 2025 by David R. Van Wagner
     4                          ; MIT LICENSE
     5                          ; github.com/davervw
     6                          ;
     7                          ; keyboard map editor for Commodore 64
     8                          ; allows remapping of keyboard on standard hardware
     9                          ; such as for internationalization for different regions
    10                          ; or modernization (more closely match modern keyboard layouts)
    11                          ;
    12                          ; currently displays keyboard maps, port of BASIC code to 6502
    13                          ;
    14                          ; TODO: editor functionality
    15                          
    16                          chrout = $ffd2
    17                          getkey = $ffe4
    18                          
    19                          jiffyclock = $a2
    20                          textptr = $d1 ;/d2 - pointer to current logical screen line, leftmost column
    21                          colorptr = $f3 ;/f4 - matching pointer to color memory
    22                          physline = $d6
    23                          logcol = $d3
    24                          color = 646
    25                          screenpage = 648
    26                          
    27                          * = $c000
    28                          
    29                          start:
    30  c000 4c06c0                 jmp init
    31  c003 4cdcc0                 jmp reserved
    32                          
    33                          init:
    34  c006 2002c3                 jsr copy_map_addrs
    35  c009 2035c3                 jsr copy_maps
    36  c00c 2056c4                 jsr compute_scan_xys
    37  c00f a993                   lda #147
    38  c011 20d2ff                 jsr chrout
    39  c014 a900                   lda #0
    40  c016 a201                   ldx #1
    41  c018 a001                   ldy #1
    42  c01a 2064c3                 jsr display_map
    43  c01d a901                   lda #1
    44  c01f a201                   ldx #1
    45  c021 a007                   ldy #7
    46  c023 2064c3                 jsr display_map
    47  c026 a902                   lda #2
    48  c028 a201                   ldx #1
    49  c02a a00d                   ldy #13
    50  c02c 2064c3                 jsr display_map
    51                          
    52  c02f a903                   lda #3
    53  c031 a201                   ldx #1
    54  c033 a013                   ldy #19
    55  c035 2064c3                 jsr display_map
    56  c038 a21b                   ldx #<xystrings
    57  c03a a0c5                   ldy #>xystrings
    58  c03c 200bc4                 jsr display_xystrs
    59                          
    60  c03f a000                   ldy #0
    61  c041 8ce5c4                 sty last_physline
    62  c044 8ce6c4                 sty last_logcol
    63  c047 84d6                   sty physline
    64  c049 a90d                   lda #13
    65  c04b 20d2ff                 jsr chrout
    66  c04e c8                     iny
    67  c04f 84d3                   sty logcol
    68                          
    69  c051 ad8602                 lda color    
    70  c054 290f                   and #15
    71  c056 8de9c4                 sta fg_color
    72  c059 aa                     tax
    73  c05a bdc1c5                 lda inverse_colors, x
    74  c05d 8deac4                 sta inv_color
    75                          
    76                          ; main loop
    77  c060 209cc1             --  jsr check_cursor_moved
    78  c063 20e0c2                 jsr blinkon
    79  c066 20a7c2             -   jsr chkblink
    80  c069 20e4ff                 jsr getkey
    81  c06c f0f8                   beq -
    82  c06e 20d1c2                 jsr blinkoff
    83  c071 c911                   cmp #$11
    84  c073 d006                   bne +
    85  c075 20ddc0                 jsr cursor_down
    86  c078 4c60c0                 jmp --
    87  c07b c991               +   cmp #$91
    88  c07d d006                   bne +
    89  c07f 200cc1                 jsr cursor_up
    90  c082 4c60c0                 jmp --
    91  c085 c91d               +   cmp #$1d
    92  c087 d006                   bne +
    93  c089 203bc1                 jsr cursor_right
    94  c08c 4c60c0                 jmp --
    95  c08f c99d               +   cmp #$9d
    96  c091 d006                   bne +
    97  c093 204ac1                 jsr cursor_left
    98  c096 4c60c0                 jmp --
    99  c099 c913               +   cmp #19
   100  c09b d006                   bne +
   101  c09d 2059c1                 jsr cursor_home
   102  c0a0 4c60c0                 jmp --
   103  c0a3 c985               +   cmp #133 ; F1
   104  c0a5 d006                   bne +
   105  c0a7 2067c1                 jsr bg_color_inc
   106  c0aa 4c60c0                 jmp --
   107  c0ad c989               +   cmp #137 ; F2
   108  c0af d006                   bne +
   109  c0b1 2075c1                 jsr bg_color_dec
   110  c0b4 4c60c0                 jmp --
   111  c0b7 c98a               +   cmp #138 ; F4
   112  c0b9 d006                   bne +
   113  c0bb 2083c1                 jsr border_color_inc
   114  c0be 4c60c0                 jmp --
   115  c0c1 c98c               +   cmp #140 ; F8
   116  c0c3 d005                   bne +
   117  c0c5 a993               -   lda #147
   118  c0c7 4cd2ff                 jmp chrout ; and !!!EXIT!!!
   119  c0ca c903               +   cmp #3 ; STOP
   120  c0cc d008                   bne +
   121  c0ce a5c5               --- lda 197
   122  c0d0 c940                   cmp #64
   123  c0d2 d0fa                   bne --- ; wait until key released
   124  c0d4 f0ef                   beq -
   125  c0d6 2087c1             +   jsr check_color
   126  c0d9 4c60c0                 jmp --
   127                          
   128                          reserved:
   129  c0dc 00                     brk
   130                          
   131                          cursor_down:
   132  c0dd a6d6                   ldx physline
   133  c0df e017                   cpx #23
   134  c0e1 900e                   bcc +
   135  c0e3 a4d3                   ldy logcol
   136  c0e5 a200                   ldx #0
   137  c0e7 86d6                   stx physline
   138  c0e9 a90d                   lda #13
   139  c0eb 20d2ff                 jsr chrout
   140  c0ee 84d3                   sty logcol
   141  c0f0 60                     rts
   142  c0f1 20d2ff             +   jsr chrout
   143  c0f4 a6d6                   ldx physline
   144  c0f6 e006                   cpx #6
   145  c0f8 d003                   bne +
   146  c0fa 20d2ff                 jsr chrout
   147  c0fd e00c               +   cpx #12
   148  c0ff d003                   bne +
   149  c101 20d2ff                 jsr chrout
   150  c104 e012               +   cpx #18
   151  c106 d003                   bne +
   152  c108 20d2ff                 jsr chrout
   153  c10b 60                 +   rts
   154                          
   155                          cursor_up:
   156  c10c a6d6                   ldx physline
   157  c10e e002                   cpx #2
   158  c110 b00e                   bcs +
   159  c112 a216                   ldx #22
   160  c114 86d6                   stx physline
   161  c116 a4d3                   ldy logcol
   162  c118 a90d                   lda #13
   163  c11a 20d2ff                 jsr chrout
   164  c11d 84d3                   sty logcol
   165  c11f 60                     rts
   166  c120 20d2ff             +   jsr chrout
   167  c123 a6d6                   ldx physline
   168  c125 e006                   cpx #6
   169  c127 d003                   bne +
   170  c129 20d2ff                 jsr chrout
   171  c12c e00c               +   cpx #12
   172  c12e d003                   bne +
   173  c130 20d2ff                 jsr chrout
   174  c133 e012               +   cpx #18
   175  c135 d003                   bne +
   176  c137 20d2ff                 jsr chrout
   177  c13a 60                 +   rts
   178                          
   179                          cursor_right:
   180  c13b a6d3                   ldx logcol
   181  c13d e012                   cpx #18
   182  c13f 9005                   bcc +
   183  c141 a201                   ldx #1
   184  c143 86d3                   stx logcol
   185  c145 60                     rts
   186  c146 20d2ff             +   jsr chrout
   187  c149 60                     rts
   188                          
   189                          cursor_left:
   190  c14a a6d3                   ldx logcol
   191  c14c e002                   cpx #2
   192  c14e b005                   bcs +
   193  c150 a212                   ldx #18
   194  c152 86d3                   stx logcol
   195  c154 60                     rts
   196  c155 20d2ff             +   jsr chrout
   197  c158 60                     rts
   198                          
   199                          cursor_home:
   200  c159 a900                   lda #0
   201  c15b 85d6                   sta physline
   202  c15d a90d                   lda #13
   203  c15f 20d2ff                 jsr chrout
   204  c162 a901                   lda #1
   205  c164 85d3                   sta logcol
   206  c166 60                     rts
   207                          
   208                          bg_color_inc:
   209  c167 ee21d0             -   inc $d021
   210  c16a ad21d0                 lda $d021
   211  c16d 290f                   and #15
   212  c16f cde9c4                 cmp fg_color
   213  c172 f0f3                   beq -
   214  c174 60                     rts
   215                          
   216                          bg_color_dec:
   217  c175 ce21d0             -   dec $d021
   218  c178 ad21d0                 lda $d021
   219  c17b 290f                   and #15
   220  c17d cde9c4                 cmp fg_color
   221  c180 f0f3                   beq -
   222  c182 60                     rts
   223                          
   224                          border_color_inc:
   225  c183 ee20d0                 inc $d020
   226  c186 60                     rts
   227                          
   228                          check_color:
   229  c187 a200                   ldx #0
   230  c189 ddb1c5             -   cmp color_chars, x
   231  c18c f006                   beq +
   232  c18e e8                     inx
   233  c18f e010                   cpx #16
   234  c191 d0f6                   bne -
   235  c193 60                     rts
   236  c194 8e8602             +   stx color
   237  c197 68                     pla ; pull return address
   238  c198 68                     pla
   239  c199 4c00c0                 jmp start ; restart program
   240                          
   241                          check_cursor_moved:
   242  c19c a6d3                   ldx logcol
   243  c19e a4d6                   ldy physline
   244  c1a0 cce5c4                 cpy last_physline
   245  c1a3 d005                   bne +
   246  c1a5 ece6c4                 cpx last_logcol
   247  c1a8 f009                   beq ++
   248  c1aa 8ee6c4             +   stx last_logcol
   249  c1ad 8ce5c4                 sty last_physline
   250  c1b0 20b4c1                 jsr display_codes
   251  c1b3 60                 ++  rts
   252                          
   253                          display_codes:
   254  c1b4 a900                   lda #0
   255  c1b6 85ff                   sta $ff ; map #
   256  c1b8 a9e1                   lda #<remaps
   257  c1ba 85fb                   sta $fb
   258  c1bc a9c5                   lda #>remaps
   259  c1be 85fc                   sta $fc    
   260  c1c0 c006               -   cpy #6
   261  c1c2 9013                   bcc +
   262  c1c4 e6ff                   inc $ff
   263  c1c6 98                     tya
   264  c1c7 e906                   sbc #6
   265  c1c9 a8                     tay
   266  c1ca 18                     clc
   267  c1cb a5fb                   lda $fb
   268  c1cd 6941                   adc #65
   269  c1cf 85fb                   sta $fb
   270  c1d1 90ed                   bcc -
   271  c1d3 e6fc                   inc $fc
   272  c1d5 d0e9                   bne -
   273  c1d7 ca                 +   dex ; change col 1 to 0, etc.
   274  c1d8 8a                     txa
   275  c1d9 88                     dey ; change line 1 to 0, etc.
   276  c1da c004                   cpy #4
   277  c1dc d00a                   bne +
   278  c1de c903                   cmp #3 ; spacebar starts at col 3
   279  c1e0 9006                   bcc +
   280  c1e2 c90c                   cmp #12 ; spacebar ends at col 11
   281  c1e4 b002                   bcs +
   282  c1e6 a903                   lda #3 ; spacebar is always at 3,4 (0 based)
   283  c1e8 18                 +   clc
   284  c1e9 79ddc4                 adc mult_x18,y
   285  c1ec a8                     tay
   286  c1ed a946                   lda #70 ; offset of screen to display code at
   287  c1ef 85fd                   sta $fd
   288  c1f1 ad8802                 lda screenpage
   289  c1f4 85fe                   sta $fe
   290  c1f6 b97bc4                 lda scan_layout,y
   291  c1f9 8502                   sta $02
   292  c1fb 204ec2                 jsr display_hex
   293  c1fe 206ec2                 jsr display_decimal
   294  c201 a5fd                   lda $fd
   295  c203 18                     clc
   296  c204 6928                   adc #40
   297  c206 85fd                   sta $fd
   298  c208 9002                   bcc +
   299  c20a e6fe                   inc $fe
   300  c20c a402               +   ldy $02
   301  c20e a9ff                   lda #$ff
   302  c210 c040                   cpy #64
   303  c212 b002                   bcs +
   304  c214 b1fb                   lda ($fb),y
   305  c216 8502               +   sta $02
   306  c218 204ec2                 jsr display_hex
   307  c21b 206ec2                 jsr display_decimal
   308  c21e a6ff                   ldx $ff
   309  c220 d006                   bne +
   310  c222 a2eb                   ldx #<state_none
   311  c224 a0c4                   ldy #>state_none
   312  c226 d019                   bne ++
   313  c228 ca                 +   dex
   314  c229 d006                   bne +
   315  c22b a2f7                   ldx #<state_shift
   316  c22d a0c4                   ldy #>state_shift
   317  c22f d010                   bne ++
   318  c231 ca                 +   dex
   319  c232 d006                   bne +
   320  c234 a203                   ldx #<state_commodore
   321  c236 a0c5                   ldy #>state_commodore
   322  c238 d007                   bne ++
   323  c23a ca                 +   dex
   324  c23b d010                   bne +++
   325  c23d a20f                   ldx #<state_control
   326  c23f a0c5                   ldy #>state_control
   327  c241 2020c4             ++  jsr display_xystr
   328  c244 aee6c4                 ldx last_logcol
   329  c247 ace5c4                 ldy last_physline
   330  c24a 20edc3                 jsr locate_xy
   331  c24d 60                 +++ rts
   332                          
   333                          display_hex: ; .A=value, $fd/fe screen dest
   334  c24e a8                     tay
   335  c24f 290f                   and #$f
   336  c251 aa                     tax
   337  c252 bdd1c5                 lda hexcodes, x
   338  c255 aa                     tax
   339  c256 98                     tya
   340  c257 4a                     lsr
   341  c258 4a                     lsr
   342  c259 4a                     lsr
   343  c25a 4a                     lsr
   344  c25b a8                     tay
   345  c25c b9d1c5                 lda hexcodes, y
   346  c25f a001                   ldy #1
   347  c261 91fd                   sta ($fd),y
   348  c263 c8                     iny
   349  c264 8a                     txa
   350  c265 91fd                   sta ($fd),y
   351  c267 a000                   ldy #0
   352  c269 a924                   lda #'$'
   353  c26b 91fd                   sta ($fd),y
   354  c26d 60                     rts
   355                          
   356                          display_decimal: ; .A=value (and $02), $fd/fe screen dest (note: display to side of hex)
   357  c26e a004                   ldy #4
   358  c270 a92b                   lda #'+'
   359  c272 91fd                   sta ($fd),y
   360  c274 a502                   lda $02
   361  c276 8503                   sta $03
   362  c278 a200                   ldx #0
   363  c27a 38                     sec
   364  c27b e964               -   sbc #100
   365  c27d 9005                   bcc +
   366  c27f 8503                   sta $03
   367  c281 e8                     inx
   368  c282 d0f7                   bne -
   369  c284 bdd1c5             +   lda hexcodes,x
   370  c287 c8                     iny
   371  c288 91fd                   sta ($fd),y
   372  c28a a503                   lda $03
   373  c28c a200                   ldx #0
   374  c28e 38                     sec
   375  c28f e90a               -   sbc #10
   376  c291 9005                   bcc +
   377  c293 8503                   sta $03
   378  c295 e8                     inx
   379  c296 d0f7                   bne -
   380  c298 bdd1c5             +   lda hexcodes,x
   381  c29b c8                     iny
   382  c29c 91fd                   sta ($fd),y
   383  c29e a603                   ldx $03
   384  c2a0 bdd1c5                 lda hexcodes,x
   385  c2a3 c8                     iny
   386  c2a4 91fd                   sta ($fd),y
   387  c2a6 60                     rts
   388                          
   389                          chkblink:
   390  c2a7 38                     sec
   391  c2a8 ade7c4                 lda jiffyblink
   392  c2ab c5a2                   cmp jiffyclock
   393  c2ad d021                   bne ++
   394  c2af a5a2                   lda jiffyclock
   395  c2b1 6914                   adc #20
   396  c2b3 8de7c4                 sta jiffyblink
   397  c2b6 aeeac4                 ldx inv_color
   398  c2b9 a4d3                   ldy logcol
   399  c2bb b1f3                   lda (colorptr),y
   400  c2bd 290f                   and #15
   401  c2bf cde9c4                 cmp fg_color
   402  c2c2 f003                   beq +
   403  c2c4 aee9c4                 ldx fg_color
   404  c2c7 8a                 +   txa
   405  c2c8 91f3                   sta (colorptr),y
   406  c2ca b1d1               +   lda (textptr),y
   407  c2cc 4980                   eor #$80
   408  c2ce 91d1                   sta (textptr),y
   409  c2d0 60                 ++  rts
   410                          
   411                          blinkoff:
   412  c2d1 aa                     tax
   413  c2d2 a4d3                   ldy logcol
   414  c2d4 ade9c4                 lda fg_color
   415  c2d7 91f3                   sta (colorptr),y
   416  c2d9 ade8c4                 lda save_cursor_char
   417  c2dc 91d1                   sta (textptr),y
   418  c2de 8a                     txa
   419  c2df 60                     rts
   420                          
   421                          blinkon:
   422  c2e0 aeeac4                 ldx inv_color ; assume inverse color
   423  c2e3 a4d3                   ldy logcol
   424  c2e5 b1d1                   lda (textptr),y
   425  c2e7 8de8c4                 sta save_cursor_char
   426  c2ea 0980                   ora #$80 ; my cursor starts with reverse character, blinking can toggle
   427  c2ec 91d1                   sta (textptr),y
   428  c2ee 3003                   bmi + ; yes inverse color
   429  c2f0 aee9c4                 ldx fg_color ; no regular color
   430  c2f3 8a                 +   txa
   431  c2f4 91f3                   sta (colorptr),y
   432  c2f6 18                     clc
   433  c2f7 a5a2                   lda jiffyclock
   434  c2f9 6914                   adc #20
   435  c2fb 8de7c4                 sta jiffyblink
   436  c2fe 60                     rts
   437                          
   438                          getmap:
   439  c2ff 6c8f02                 jmp ($028f)
   440                          
   441                          copy_map_addrs:
   442                              ; first retrieve addresses to four sets
   443  c302 78                     sei ; don't allow IRQ to process keyboard and interfere with us
   444                          
   445  c303 ad8d02                 lda $28d
   446  c306 48                     pha ; save existing keyboard shift state
   447                          
   448  c307 a000                   ldy #0
   449  c309 84ff                   sty $ff
   450  c30b 8c8d02                 sty $28d ; keyboard shift state (0,1,2,4)
   451  c30e 20ffc2             -   jsr getmap
   452  c311 a5f5                   lda $f5
   453  c313 a4ff                   ldy $ff
   454  c315 99d5c4                 sta rom_maps,y
   455  c318 a5f6                   lda $f6
   456  c31a 99d6c4                 sta rom_maps+1,y
   457  c31d e6ff                   inc $ff
   458  c31f e6ff                   inc $ff
   459  c321 ad8d02                 lda $28d
   460  c324 18                     clc
   461  c325 d001                   bne +
   462  c327 38                     sec
   463  c328 2e8d02             +   rol $28d
   464  c32b c904                   cmp #4
   465  c32d 90df                   bcc -
   466                          
   467  c32f 68                     pla
   468  c330 8d8d02                 sta $28d ; restore shift map
   469                          
   470  c333 58                     cli ; restore keyboard
   471  c334 60                     rts
   472                          
   473                          copy_maps:
   474  c335 a200                   ldx #0
   475  c337 a9e1                   lda #<remaps
   476  c339 85fd                   sta $fd
   477  c33b a9c5                   lda #>remaps
   478  c33d 85fe                   sta $fe
   479  c33f bdd5c4             --  lda rom_maps,x
   480  c342 85fb                   sta $fb
   481  c344 bdd6c4                 lda rom_maps+1,x
   482  c347 85fc                   sta $fc
   483                          
   484  c349 a040                   ldy #64
   485  c34b b1fb               -   lda ($fb),y
   486  c34d 91fd                   sta ($fd),y
   487  c34f 88                     dey
   488  c350 10f9                   bpl -
   489                          
   490  c352 18                     clc
   491  c353 a5fd                   lda $fd
   492  c355 6941                   adc #65
   493  c357 85fd                   sta $fd
   494  c359 9002                   bcc +
   495  c35b e6fe                   inc $fe
   496                          +
   497  c35d e8                     inx
   498  c35e e8                     inx
   499  c35f e008                   cpx #8
   500  c361 90dc                   bcc --
   501  c363 60                     rts
   502                          
   503                          display_map: ; .a = map (0..3), .x/.y = screen coordinates
   504  c364 8ee4c4                 stx col_x
   505  c367 8ce3c4                 sty row_y
   506                          
   507  c36a aa                     tax
   508  c36b a9e1                   lda #<remaps
   509  c36d 85fb                   sta $fb
   510  c36f a9c5                   lda #>remaps
   511  c371 85fc                   sta $fc
   512  c373 e000                   cpx #0
   513  c375 f00e                   beq ++
   514  c377 18                 -   clc
   515  c378 a5fb                   lda $fb
   516  c37a 6941                   adc #65
   517  c37c 85fb                   sta $fb
   518  c37e 9002                   bcc +
   519  c380 e6fc                   inc $fc
   520  c382 ca                 +   dex
   521  c383 d0f2                   bne -
   522                          ++
   523  c385 a900                   lda #0
   524  c387 85ff                   sta $ff ; scancode
   525  c389 a8                     tay
   526  c38a b1fb               -   lda ($fb),y ; remap of requested shift state
   527  c38c c9ff                   cmp #$ff
   528  c38e f00f                   beq +
   529                          
   530  c390 8502                   sta $02 ; save character
   531  c392 b9e5c6                 lda scancode_x, y
   532  c395 aa                     tax
   533  c396 b925c7                 lda scancode_y, y
   534  c399 a8                     tay
   535  c39a a502                   lda $02 ; restore character
   536                          
   537  c39c 20a8c3                 jsr display_char_at_xy
   538  c39f e6ff               +   inc $ff
   539  c3a1 a4ff                   ldy $ff
   540  c3a3 c040                   cpy #64
   541  c3a5 90e3                   bcc -
   542  c3a7 60                     rts
   543                          
   544                          display_char_at_xy:
   545  c3a8 48                     pha
   546  c3a9 a900                   lda #0
   547  c3ab 85fe                   sta $fe
   548  c3ad c004                   cpy #4 ; spacebar row?
   549  c3af d002                   bne +
   550  c3b1 a908                   lda #8 ; repeat count for spacebar position
   551  c3b3 85fe               +   sta $fe
   552                          
   553  c3b5 20edc3                 jsr locate_xy
   554                          
   555  c3b8 68                     pla
   556  c3b9 c9a0                   cmp #160 ; shift space
   557  c3bb f002                   beq +
   558  c3bd c920                   cmp #32 ; space
   559  c3bf d006               +   bne +
   560  c3c1 a201                   ldx #1
   561  c3c3 86c7                   stx $c7
   562  c3c5 d01e                   bne ++
   563  c3c7 c90d               +   cmp #13 ; return ^M
   564  c3c9 d008                   bne +
   565  c3cb a201                   ldx #1
   566  c3cd 86c7                   stx $c7
   567  c3cf a94d                   lda #'M'
   568  c3d1 d012                   bne ++
   569  c3d3 c98d               +   cmp #141 ; shift+return ^M
   570  c3d5 d008                   bne +
   571  c3d7 a201                   ldx #1
   572  c3d9 86c7                   stx $c7
   573  c3db a96d                   lda #'m'
   574  c3dd d006                   bne ++
   575  c3df a201               +   ldx #1
   576  c3e1 86d4                   stx $d4 ; quote mode just in case for control characters
   577  c3e3 86d8                   stx $d8 ; number of inserts just in case for control characters
   578                          ++
   579  c3e5 20d2ff             -   jsr chrout
   580  c3e8 c6fe                   dec $fe
   581  c3ea 10f9                   bpl - ; repeat for spacebar
   582  c3ec 60                     rts
   583                          
   584                          locate_xy:
   585  c3ed 98                     tya
   586  c3ee 18                     clc
   587  c3ef 6de3c4                 adc row_y
   588  c3f2 c900                   cmp #0
   589  c3f4 d004                   bne +
   590  c3f6 a913                   lda #19 ; home
   591  c3f8 d006                   bne ++
   592  c3fa e901               +   sbc #1
   593  c3fc 85d6                   sta physline
   594  c3fe a90d                   lda #13
   595  c400 20d2ff             ++  jsr chrout ; effect the change
   596  c403 18                     clc
   597  c404 8a                     txa
   598  c405 6de4c4                 adc col_x
   599  c408 85d3                   sta logcol
   600  c40a 60                     rts
   601                          
   602                          display_xystrs: ; pointer to an xystr, terminated by empty string (0 length)
   603  c40b 86fb                   stx $fb
   604  c40d 84fc                   sty $fc
   605  c40f a002               -   ldy #2
   606  c411 b1fb                   lda ($fb),y
   607  c413 f00a                   beq +
   608  c415 a6fb                   ldx $fb
   609  c417 a4fc                   ldy $fc
   610  c419 2020c4                 jsr display_xystr
   611  c41c 4c0fc4                 jmp -
   612  c41f 60                 +   rts
   613                          
   614                          display_xystr: ; string (x/y registers ptr) is prefixed by screen coordinates, terminated by null
   615  c420 86fb                   stx $fb
   616  c422 84fc                   sty $fc
   617  c424 a000                   ldy #0
   618  c426 8ce4c4                 sty col_x
   619  c429 8ce3c4                 sty row_y
   620  c42c b1fb                   lda ($fb),y
   621  c42e aa                     tax
   622  c42f c8                     iny
   623  c430 b1fb                   lda ($fb),y
   624  c432 a8                     tay
   625  c433 20edc3                 jsr locate_xy
   626  c436 18                     clc
   627  c437 a5fb                   lda $fb
   628  c439 6902                   adc #2
   629  c43b 85fb                   sta $fb
   630  c43d 9002                   bcc +
   631  c43f e6fc                   inc $fc
   632  c441 a000               +   ldy #0
   633  c443 b1fb               -   lda ($fb),y
   634  c445 e6fb                   inc $fb
   635  c447 d002                   bne +
   636  c449 e6fc                   inc $fc
   637  c44b c900               +   cmp #0
   638  c44d f006                   beq +
   639  c44f 20d2ff                 jsr chrout
   640  c452 4c43c4                 jmp -
   641  c455 60                 +   rts
   642                          
   643                          compute_scan_xys:
   644  c456 a959                   lda #(5*18-1)
   645  c458 85ff                   sta $ff
   646  c45a a004                   ldy #4
   647  c45c 8402                   sty $02
   648  c45e a211               --  ldx #17
   649  c460 a4ff               -   ldy $ff
   650  c462 b97bc4                 lda scan_layout,y
   651  c465 300a                   bmi +
   652  c467 a8                     tay
   653  c468 8a                     txa
   654  c469 99e5c6                 sta scancode_x,y
   655  c46c a502                   lda $02
   656  c46e 9925c7                 sta scancode_y,y
   657  c471 c6ff               +   dec $ff
   658  c473 ca                     dex
   659  c474 10ea                   bpl -
   660  c476 c602                   dec $02
   661  c478 10e4                   bpl --
   662  c47a 60                     rts
   663                          
   664                          ; this is the hardware scan code physical layout as a 5x18 array
   665                          ; keys are independent of internationalization, localization
   666                          ; because these are scancodes - the physical key representations
   667                          ; independent of the PETSCII codes they map to via KERNAL ROM
   668                          ; or remapping like we will do
   669                          ;
   670                          ; each key 0..63 should be shown exactly once, with 255 for whitespace (not a key)
   671                          ;
   672                          ; the purpose of this array is to show where physical keys are
   673                          ; It does not change.  !!! DO NOT CHANGE !!!
   674                          scan_layout: ; 5 rows, 18 columns = 90 bytes
   675  c47b 39383b080b101318...    !byte 57,56,59,8,11,16,19,24,27,32,35,40,43,48,51,0,255,4
   676  c48d 3aff3e090e111619...    !byte 58,255,62,9,14,17,22,25,30,33,38,41,46,49,54,255,255,5
   677  c49f 3fff0a0d12151a1d...    !byte 63,255,10,13,18,21,26,29,34,37,42,45,50,53,255,1,255,6
   678  c4b1 3d340c17141f1c27...    !byte 61,52,12,23,20,31,28,39,36,47,44,55,255,15,7,2,255,3
   679  c4c3 ffffff3cffffffff...    !byte 255,255,255,60,255,255,255,255,255,255,255,255,255,255,255,255,255,255
   680                          
   681                          ; with a US ROM, this will display like the following
   682                          ; _1234567890+-\st E
   683                          ; d qwertyuiop@*^  F
   684                          ; c asdfghjkl:;= m G
   685                          ; bazxcvbnm,./ aq] H
   686                          
   687                          rom_maps: ; addresses of maps in ROM
   688  c4d5 0000                   !word 0 ; unshifted
   689  c4d7 0000                   !word 0 ; shifted
   690  c4d9 0000                   !word 0 ; commodore
   691  c4db 0000                   !word 0 ; control
   692                          
   693                          mult_x18:
   694  c4dd 00122436485a           !byte 0, 18, 36, 54, 72, 90
   695                          
   696                          ; origin point for locate_xy
   697  c4e3 00                 row_y: !byte 0
   698  c4e4 00                 col_x: !byte 0
   699                          
   700  c4e5 00                 last_physline: !byte 0
   701  c4e6 00                 last_logcol: !byte 0
   702                          
   703  c4e7 00                 jiffyblink: !byte 0
   704  c4e8 00                 save_cursor_char: !byte 0
   705  c4e9 0e                 fg_color: !byte 14
   706  c4ea 0b                 inv_color: !byte 11
   707                          
   708  c4eb 190420204e4f4e45...state_none:      !text 25,4,"  NONE   ",0
   709  c4f7 1904202053484946...state_shift:     !text 25,4,"  SHIFT  ",0
   710  c503 1904434f4d4d4f44...state_commodore: !text 25,4,"COMMODORE",0
   711  c50f 190420434f4e5452...state_control:   !text 25,4," CONTROL ",0
   712                          
   713                          xystrings:
   714  c51b 1501125343414e43...    !text 21,1,18,"SCANCODE",146,"          ",0
   715  c532 1602125045545343...    !text 22,2,18,"PETSCII",146,"          ",0
   716                          ;    !text 21,5,"UPPERCASE/GRAPHICS",0
   717                          ;    !text 26,6,18,"C64.KEY",0
   718  c548 1a0b5b42472b205d...    !text 26,11,"[BG+ ] F1",0
   719  c554 1a0c5b42472d205d...    !text 26,12,"[BG- ] F2",0
   720                          ;    !text 26,13,"[FIND] F3",0
   721  c560 1a0e5b4252442b5d...    !text 26,14,"[BRD+] F4",0
   722                          ;    !text 26,15,"[SAVE] F5",0
   723                          ;    !text 26,16,"[LOAD] F6",0
   724                          ;    !text 26,17,"[TEST] F7",0
   725  c56c 1a125b455849545d...    !text 26,18,"[EXIT] F8",0
   726                              ;!text 23,22,18,"KEYMAP EDITOR",0
   727  c578 171612433634204b...    !text 23,22,18,"C64 KEYMAPS",0
   728  c587 1617284329323032...    !text 22,23,"(C)2025 DAVERVW",0
   729  c599 1518474954485542...    !text 21,24,"GITHUB.COM/DAVERVW",0
   730  c5ae 000000                 !text 0,0,0
   731                          
   732                          ; control characters that change colors, in order colors 0..15
   733  c5b1 90051c9f9c1e1f9e...color_chars !byte 144,5,28,159,156,30,31,158,129,149,150,151,152,153,154,155
   734                          
   735                          ; complementary colors in relation to colors 0..15
   736  c5c1 0100050a0d020809...inverse_colors !byte 1,0,5,10,13,2,8,9,6,7,3,14,15,4,11,12
   737                          
   738  c5d1 3031323334353637...hexcodes !text "0123456789",1,2,3,4,5,6 ; screen codes
   739                          
   740                          remaps = * ; 4 keyboard sets of PETSCII characters indexed by scancode (260 bytes total, 65 bytes each set)
   741                          
   742                          ; coordinates are derived from scan_layout at runtime to avoid redundant maintainance
   743                          scancode_x = remaps + 260 ; 64 bytes total
   744                          scancode_y = scancode_x + 64 ; 64 bytes total
   745                          
   746                          finish = scancode_y + 64 ; end
